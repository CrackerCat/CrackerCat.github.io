<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CKCat Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-03T15:12:29.661Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CKCat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Studio动态调试apk</title>
    <link href="http://yoursite.com/2017/12/03/Android%20Studio%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95apk/"/>
    <id>http://yoursite.com/2017/12/03/Android Studio动态调试apk/</id>
    <published>2017-12-03T14:54:54.811Z</published>
    <updated>2017-12-03T15:12:29.661Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Android-Studio动态调试apk"><a href="#Android-Studio动态调试apk" class="headerlink" title="Android Studio动态调试apk"></a>Android Studio动态调试apk</h1><h2 id="1-需要的工具"><a href="#1-需要的工具" class="headerlink" title="1. 需要的工具"></a>1. 需要的工具</h2><ul><li>apktool : <a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">https://ibotpeaches.github.io/Apktool/</a></li><li>smalidea: <a href="https://bitbucket.org/JesusFreke/smali/downloads/" target="_blank" rel="external">https://bitbucket.org/JesusFreke/smali/downloads/</a></li></ul><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h2><ul><li><p>使用apktool反编译apk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">E:\Work&gt;java -jar apktool_2.3.0.jar d app-debug.apk</span><br><span class="line">I: Using Apktool 2.3.0 on app-debug.apk</span><br><span class="line">I: Loading resource table...</span><br><span class="line">I: Decoding AndroidManifest.xml with resources...</span><br><span class="line">I: Loading resource table from file: C:\Users\CKCat\AppData\Local\apktool\framework\1.apk</span><br><span class="line">I: Regular manifest package...</span><br><span class="line">I: Decoding file-resources...</span><br><span class="line">I: Decoding values */* XMLs...</span><br><span class="line">I: Baksmaling classes.dex...</span><br><span class="line">I: Copying assets and libs...</span><br><span class="line">I: Copying unknown files...</span><br><span class="line">I: Copying original files...</span><br></pre></td></tr></table></figure></li><li><p>android studio 按默认选项导入工程</p><p><img src="http://ww1.sinaimg.cn/large/aa59003aly1flnshkvznsj20en04yq2y.jpg" alt=""></p></li><li><p>切换到Project视图，配置编译选项</p><p><img src="http://ww1.sinaimg.cn/large/aa59003aly1flnsl9ytubj20fq0aeq38.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/aa59003aly1flnsmmhg7wj20dk0dgdg1.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/aa59003aly1flnso8fw52j20io0jr74t.jpg" alt=""></p></li><li><p>选择Project SDK版本Flie==&gt;Project Structure </p><p><img src="http://ww1.sinaimg.cn/large/aa59003aly1flnsr62eo8j20ki0cmmxk.jpg" alt=""></p></li><li><p>打开DDMS(Tools==&gt;Andriod==&gt;Android Device Monitor)</p></li><li><p>在Terminal 内使用命令，以调试方式启动App，启动成功后，可以在手机上看到Wating For Debugger对话框。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E:\Work\app-debug&gt;adb shell am start -D -n com.zidiv.youmidemo/.StartActivity</span><br><span class="line">WARNING: linker: app_process has text relocations. This is wasting memory and is a security risk. Please fix</span><br><span class="line">.</span><br><span class="line">WARNING: linker: app_process has text relocations. This is wasting memory and is a security risk. Please fix</span><br><span class="line">.</span><br><span class="line">Starting: Intent &#123; cmp=com.zidiv.youmidemo/.StartActivity &#125;</span><br></pre></td></tr></table></figure><p>此时手机界面</p><p><img src="http://ww1.sinaimg.cn/large/aa59003aly1flnsvbrk6nj20f00qot96.jpg" alt=""></p></li><li><p>设置断点，开始调试</p><p><img src="http://ww1.sinaimg.cn/large/aa59003aly1flnsxrmnrdj20je0jmabe.jpg" alt=""></p><p>整个调试过程就结束了。</p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Android-Studio动态调试apk&quot;&gt;&lt;a href=&quot;#Android-Studio动态调试apk&quot; class=&quot;headerlink&quot; title=&quot;Android Studio动态调试apk&quot;&gt;&lt;/a&gt;Android St
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android debug" scheme="http://yoursite.com/tags/Android-debug/"/>
    
  </entry>
  
  <entry>
    <title>Android动态调试so</title>
    <link href="http://yoursite.com/2017/12/03/Android%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95so/"/>
    <id>http://yoursite.com/2017/12/03/Android动态调试so/</id>
    <published>2017-12-03T14:54:54.810Z</published>
    <updated>2017-12-03T15:12:37.819Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Android动态调试so"><a href="#Android动态调试so" class="headerlink" title="Android动态调试so"></a>Android动态调试so</h2><h3 id="1-安装app"><a href="#1-安装app" class="headerlink" title="1. 安装app"></a>1. 安装app</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; adb install AliCrackme_2.apk</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="2-将android-server-nonpie拷到到手机中的-data-local-tmp-中，执行android-server-nonpie"><a href="#2-将android-server-nonpie拷到到手机中的-data-local-tmp-中，执行android-server-nonpie" class="headerlink" title="2. 将android_server_nonpie拷到到手机中的./data/local/tmp 中，执行android_server_nonpie"></a>2. 将android_server_nonpie拷到到手机中的./data/local/tmp 中，执行android_server_nonpie</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; adb push g:/android_server_nonpie /data/local/tmp/android_server_nonpie</span><br><span class="line">&gt; adb shell chmod 777 /data/local/tmp/android_server_nonpie</span><br><span class="line">&gt; adb shell /data/local/tmp/android_server_nonpie</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-端口转发"><a href="#3-端口转发" class="headerlink" title="3. 端口转发"></a>3. 端口转发</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; adb forward tcp:23946 tcp:23946</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-IDA设置调试端口"><a href="#4-IDA设置调试端口" class="headerlink" title="4. IDA设置调试端口"></a>4. IDA设置调试端口</h3><blockquote><p><img src="https://ws1.sinaimg.cn/large/aa59003aly1filo4aihnlj20fh08sdg9.jpg" alt="img"></p></blockquote><h3 id="5-以调试模式运行apk"><a href="#5-以调试模式运行apk" class="headerlink" title="5.以调试模式运行apk"></a>5.以调试模式运行apk</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; adb shell am start -D -n com.yaotong.crackme/com.yaotong.crackme.MainActivity</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p><img src="https://ws1.sinaimg.cn/large/aa59003aly1filo4ldeemj20it0cawfh.jpg" alt="img"></p></blockquote><h3 id="6-IDA–attach"><a href="#6-IDA–attach" class="headerlink" title="6. IDA–attach"></a>6. IDA–attach</h3><blockquote><p><strong>启动IDA–&gt;debugger–&gt;attach–&gt;remote armlinux/android debugger–&gt;填localhost–&gt;ok–&gt;选择对应进程,下好断点直接F9运行</strong><br><img src="https://ws1.sinaimg.cn/large/aa59003aly1filo4u5wy6j20hh0bfwfk.jpg" alt="img"></p></blockquote><h3 id="7-jdb–attach"><a href="#7-jdb–attach" class="headerlink" title="7. jdb–attach"></a>7. jdb–attach</h3><blockquote><p>启动monitor<br><img src="https://ws1.sinaimg.cn/large/aa59003aly1filo51dvaqj20my0f8jta.jpg" alt="img"><br>输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p><img src="https://ws1.sinaimg.cn/large/aa59003aly1filo56kl6pj20it0cawfl.jpg" alt="img"><br><img src="https://ws1.sinaimg.cn/large/aa59003aly1filo5ca6ptj211y0k80vc.jpg" alt="img"></p></blockquote><h3 id="8-IDA常用快捷键"><a href="#8-IDA常用快捷键" class="headerlink" title="8. IDA常用快捷键"></a>8. IDA常用快捷键</h3><ol><li>Shift+F12快速查看so文件中包含的字符串信息</li><li>F5快捷键可以将arm指令转化成可读的C代码，这里同时可以使用Y键，修改JNIEnv的函数方法名</li><li>Ctrl+S有两个用途，在IDA View页面中可以查看so文件的所有段信息，在调试页面可以查看程序所有so文件映射到内存的基地址</li><li>G键可以在调试界面，快速跳转到指定的绝对地址，进行下断点调试，这里如果跳转到目的地址之后，发现是DCB数据的话，可以在使用P键，进行转化即可，关于DCB数据，下面会介绍的。</li><li>F7键可以单步进入调试，F8键可以单步调试</li><li>使用cat命令查看一个进程的内存映射信息：cat /proc/[pid]/maps</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;Android动态调试so&quot;&gt;&lt;a href=&quot;#Android动态调试so&quot; class=&quot;headerlink&quot; title=&quot;Android动态调试so&quot;&gt;&lt;/a&gt;Android动态调试so&lt;/h2&gt;&lt;h3 id=&quot;1-安装app&quot;
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android debug" scheme="http://yoursite.com/tags/Android-debug/"/>
    
  </entry>
  
  <entry>
    <title>Window下OLLVM Android编译环境搭建</title>
    <link href="http://yoursite.com/2017/12/03/Window%E4%B8%8BOLLVM%20Android%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/12/03/Window下OLLVM Android编译环境搭建/</id>
    <published>2017-12-03T14:54:31.112Z</published>
    <updated>2017-12-03T15:00:56.952Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Window下OLLVM-Android编译环境搭建"><a href="#Window下OLLVM-Android编译环境搭建" class="headerlink" title="Window下OLLVM Android编译环境搭建"></a>Window下OLLVM Android编译环境搭建</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><ul><li><p>安装MinGW64 for Windows 和 Cmake 3.9 rc5 for Windows x64</p></li><li><p>下载OLLVM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b llvm-4.0 https://github.com/obfuscator-llvm/obfuscator.git</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-修改源码"><a href="#2-修改源码" class="headerlink" title="2. 修改源码"></a>2. 修改源码</h2><p>如果直接编译源码，在使用过程中可能会出现各种问题，可以根据<a href="https://github.com/obfuscator-llvm/obfuscator/pulls" target="_blank" rel="external">obfuscator pull</a>页面的内容对源码进行修改，修复一些bug(这里特别感谢<a href="https://github.com/F8LEFT" target="_blank" rel="external">F8LEFT - Currwin</a>的指点)，我把页面中关于4.0的pull全部加到了工程中，使用过程中暂时还没遇到什么问题。</p><h2 id="3-编译并且加入到NDK编译工具中"><a href="#3-编译并且加入到NDK编译工具中" class="headerlink" title="3. 编译并且加入到NDK编译工具中"></a>3. 编译并且加入到NDK编译工具中</h2><ul><li><p>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake -G &quot;MinGW Makefiles&quot; -DCMAKE_BUILD_TYPE=Release ../obfuscator/</span><br><span class="line">make -j16</span><br></pre></td></tr></table></figure><p>数字可根据电脑配置进行选择，编译完成后，会在build/bin下看到编译完成的二进制文件，编译时间比较长。</p></li><li><p>加入到NDK编译工具中</p><ol><li><p>备份<code>\ndk-bundle\toolchains\</code>目录下的<code>llvm</code>文件夹</p></li><li><p>将<code>\build\bin</code>目录下的<code>clang.exe</code>、<code>clang++.exe</code>和<code>clang-format.exe</code>复制到<code>\ndk-bundle\toolchains\llvm\prebuilt\windows-x86_64\bin</code>目录下，直接替换掉其中的文件。</p><p>​</p></li></ol></li></ul><h2 id="4-使用OLLVM"><a href="#4-使用OLLVM" class="headerlink" title="4. 使用OLLVM"></a>4. 使用OLLVM</h2><blockquote><p>说明：第一次使用可能会提示缺少头文件，编译器报错缺少什么头文件直接在<code>\build\lib\clang\4.0.1\include</code>目录中找到并复制到<code>ndk-bundle\sysroot\usr\include</code>目录中，我这里缺少的是<code>stdarg.h</code>、<code>stddef.h</code>和<code>float.h</code>着三个头文件。</p></blockquote><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(argc &gt; b)&#123;</span><br><span class="line">        a = <span class="number">100</span>;</span><br><span class="line">        b = <span class="number">50</span>;</span><br><span class="line">        c = a - b;</span><br><span class="line">        <span class="keyword">int</span> d = a + b;</span><br><span class="line">        <span class="keyword">int</span> e = a &amp; b;</span><br><span class="line">        <span class="keyword">int</span> f = a ^ b;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"c = %d\n"</span>,c);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"d = %d\n"</span>,d);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"e = %d\n"</span>,e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"f = %d\n"</span>,f);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a &gt; b\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (argc == b)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a == b\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a &lt; b\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="控制流平展模式"><a href="#控制流平展模式" class="headerlink" title="控制流平展模式"></a>控制流平展模式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-mllvm -fla: 启用control flow flattening</span><br><span class="line">-mllvm -split: 启用block切分，提升平展程度,这个选项我这里测试有问题</span><br><span class="line">-mllvm -split_num=3: 对每个block混淆3次，默认1词</span><br></pre></td></tr></table></figure><p>在build.gradle中添加如下选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">externalNativeBuild &#123;</span><br><span class="line">    cmake &#123;</span><br><span class="line">        cppFlags &quot;-frtti -fexceptions -mllvm -fla -mllvm -split_num=10&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>编译后的结果</p><p><img src="img/sub.png" alt=""></p><p>F5后的结果:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v6; <span class="comment">// [sp+28h] [bp-38h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v7; <span class="comment">// [sp+3Ch] [bp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [sp+48h] [bp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [sp+50h] [bp-10h]</span></span><br><span class="line"></span><br><span class="line">  v8 = argc;</span><br><span class="line">  v7 = <span class="number">3</span>;</span><br><span class="line">  v9 = argc;</span><br><span class="line">  v6 = <span class="number">771695251</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( v6 == <span class="number">-2058880621</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = <span class="number">50</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"c = %d\n"</span>, <span class="number">50</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"d = %d\n"</span>, <span class="number">150</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"e = %d\n"</span>, <span class="number">32</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"f = %d\n"</span>, <span class="number">86</span>);</span><br><span class="line">      v6 = <span class="number">-776822343</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"a &gt; b\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">-776822343</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">-731725772</span>:</span><br><span class="line">        v6 = <span class="number">1484685734</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a &lt; b\n"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">771695251</span>:</span><br><span class="line">        v3 = <span class="number">1879976482</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v9 &gt; <span class="number">3</span> )</span><br><span class="line">          v3 = <span class="number">-2058880621</span>;</span><br><span class="line">        v6 = v3;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1409545316</span>:</span><br><span class="line">        v6 = <span class="number">1484685734</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a == b\n"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1484685734</span>:</span><br><span class="line">        v6 = <span class="number">-776822343</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1879976482</span>:</span><br><span class="line">        v4 = <span class="number">-731725772</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v8 == v7 )</span><br><span class="line">          v4 = <span class="number">1409545316</span>;</span><br><span class="line">        v6 = v4;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下的各种模式和上面的使用方式基本相同，就不一一实验了。</p><ul><li><p>指令替换模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-mllvm -sub: 启用instructions substitution  </span><br><span class="line">-mllvm -sub_loop=3: 对每个函数混淆3次，默认1词</span><br></pre></td></tr></table></figure></li><li><p>控制流平展模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-mllvm -bcf: 启用 bogus control flow</span><br><span class="line">-mllvm -bcf_loop=3: 对一个函数混淆3次，默认1次</span><br><span class="line">-mllvm -bcf_prob=40: 代码块被混淆的概率是40%，默认30%</span><br></pre></td></tr></table></figure></li><li><p>加密字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-mllvm -sobf</span><br></pre></td></tr></table></figure></li><li><p>组合模式</p><p>上述介绍的三种混淆模式可以搭配使用，同时使用三个参数混淆后，原本简单的if-else分支代码将会变得异常复杂，这无疑给逆向分析增加巨大的难度。</p></li><li><p>指定的函数混淆或不混淆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int foo() __attribute((__annotate__((&quot;fla&quot;))));</span><br><span class="line">int foo() &#123;</span><br><span class="line">   return 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如，想对函数foo()使用fla混淆，只需要给函数foo()增加fla属性即可；如果你不想混淆某个函数，你可以使用否定标签。例如如果不想对func()函数使用fla属性，那标记为“nofla”即可。</p><p>​</p></li></ul><p>##5.结束语</p><p>在配置环境过程中遇到了各种坑，最后感谢各位大佬对我的问题的解答。</p><p>参考资料：</p><p><a href="http://bobao.360.cn/learning/detail/4069.html" target="_blank" rel="external">为OLLVM添加字符串混淆功能</a></p><p><a href="https://geneblue.github.io/2016/10/09/%E5%88%A9%E7%94%A8OLLVM%E6%B7%B7%E6%B7%86Android%20Native%E4%BB%A3%E7%A0%81%E7%AF%87%E4%B8%80/" target="_blank" rel="external">利用OLLVM混淆Android Native代码篇一</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Window下OLLVM-Android编译环境搭建&quot;&gt;&lt;a href=&quot;#Window下OLLVM-Android编译环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Window下OLLVM Android编译环境搭建&quot;
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="OLLVM" scheme="http://yoursite.com/tags/OLLVM/"/>
    
  </entry>
  
  <entry>
    <title>jeb 1.5脚本编写</title>
    <link href="http://yoursite.com/2017/11/11/JEB%201.5%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99/"/>
    <id>http://yoursite.com/2017/11/11/JEB 1.5脚本编写/</id>
    <published>2017-11-11T08:53:20.000Z</published>
    <updated>2017-11-11T09:35:58.619Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="JEB-1-5脚本编写"><a href="#JEB-1-5脚本编写" class="headerlink" title="JEB 1.5脚本编写"></a>JEB 1.5脚本编写</h1><h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h2><p><strong>如果不需要代码补全功能，可以忽略此步骤 </strong></p><ul><li>IDE环境： PyCharm</li><li>Python版本： Python2.7.6 </li><li>使用<code>JythonHelper</code>插件, 生成skeleton从而有基本的代码补全</li></ul><blockquote><h3 id="随便新建一个工程，在设置中Other-Setting–-gt-Jpthon-Helper中添加jeb-jar-此处一定要注意选择与Python的对应的平台"><a href="#随便新建一个工程，在设置中Other-Setting–-gt-Jpthon-Helper中添加jeb-jar-此处一定要注意选择与Python的对应的平台" class="headerlink" title="随便新建一个工程，在设置中Other Setting–&gt;Jpthon Helper中添加jeb.jar; 此处一定要注意选择与Python的对应的平台"></a>随便新建一个工程，在设置中<code>Other Setting</code>–&gt;<code>Jpthon Helper</code>中添加jeb.jar; 此处一定要注意选择与Python的对应的平台</h3><p><img src="https://ws1.sinaimg.cn/large/aa59003aly1fhppbg6ynyj20sd089mxf.jpg" alt=""></p><h3 id="右键选择Jpthon-Helper就可以生成对应的skeleton，-此时就可以有基本的代码补全了。"><a href="#右键选择Jpthon-Helper就可以生成对应的skeleton，-此时就可以有基本的代码补全了。" class="headerlink" title="右键选择Jpthon Helper就可以生成对应的skeleton， 此时就可以有基本的代码补全了。"></a>右键选择<code>Jpthon Helper</code>就可以生成对应的<code>skeleton</code>， 此时就可以有基本的代码补全了。</h3></blockquote><h2 id="2-第一个测试程序"><a href="#2-第一个测试程序" class="headerlink" title="2. 第一个测试程序"></a>2. 第一个测试程序</h2><p><code>hello.py</code>要注意文件名和类名一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from jeb.api import IScript</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Hello(IScript):</span><br><span class="line">    def run(self, j):</span><br><span class="line">        self.instance = j</span><br><span class="line">        self.instance.print(&quot;hello jebScripts&quot;)</span><br></pre></td></tr></table></figure><p>将脚本拷贝到jeb/scripts目录中，在jeb的菜单中选择Run Scripts, 选中Hello.py即可看到输出了<code>hello jebScripts</code>; 一个脚本就写好了。</p><p><img src="https://ws1.sinaimg.cn/large/aa59003aly1fhppvzbqs2j20df02wwea.jpg" alt=""></p><h3 id="如果想要进阶的话可以参看一下文章以及官方文档"><a href="#如果想要进阶的话可以参看一下文章以及官方文档" class="headerlink" title="如果想要进阶的话可以参看一下文章以及官方文档"></a>如果想要进阶的话可以参看一下文章以及官方文档</h3><p><a href="http://www.cnblogs.com/bingghost/p/5792972.html" target="_blank" rel="external">JEB 1.5插件编写一</a><br><a href="http://www.cnblogs.com/bingghost/p/5792974.html" target="_blank" rel="external">JEB1.5 插件编写二</a><br><a href="https://www.secpulse.com/archives/33922.html" target="_blank" rel="external">Android应用分析进阶教程之一 —— 初识JEBAPI</a></p><h3 id="一些比较有用的脚本"><a href="#一些比较有用的脚本" class="headerlink" title="一些比较有用的脚本"></a>一些比较有用的脚本</h3><p><a href="https://github.com/flankerhqd/jebPlugins" target="_blank" rel="external">反混淆的一些脚本</a></p><h2 id="3-文档介绍"><a href="#3-文档介绍" class="headerlink" title="3. 文档介绍"></a>3. 文档介绍</h2><h3 id="3-1-主要的包"><a href="#3-1-主要的包" class="headerlink" title="3.1 主要的包"></a>3.1 主要的包</h3><p><img src="https://ws1.sinaimg.cn/large/aa59003aly1fhpq0jdu88j20if0a70tu.jpg" alt=""></p><h3 id="3-2-AST-API结构"><a href="#3-2-AST-API结构" class="headerlink" title="3.2 AST API结构"></a>3.2 AST API结构</h3><p>所有的AST Element实现jeb.api.ast.IElement<br>要么继承于jeb.api.ast.NonStatement,要么继承于jeb.api.ast.Statement</p><p><img src="https://ws1.sinaimg.cn/large/aa59003aly1fhpq1ljg9zj20dw06p3yu.jpg" alt=""></p><p>IElement定义了getSubElements,但不同类型的实现和返回结果也不同,例如:</p><h4 id="1-对Method进行getSubElements返回"><a href="#1-对Method进行getSubElements返回" class="headerlink" title="1. 对Method进行getSubElements返回"></a>1. 对Method进行getSubElements返回</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数的参数定义语句</span><br><span class="line">函数体block</span><br></pre></td></tr></table></figure><h4 id="2-IfStmt会返回"><a href="#2-IfStmt会返回" class="headerlink" title="2. IfStmt会返回"></a>2. IfStmt会返回</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">判断使用的Predicate</span><br><span class="line">每一个if/else/ifelse语句块</span><br></pre></td></tr></table></figure><h4 id="3-Assignment语句返回"><a href="#3-Assignment语句返回" class="headerlink" title="3. Assignment语句返回"></a>3. Assignment语句返回</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">左右IExpression操作数</span><br><span class="line">Operator操作符</span><br></pre></td></tr></table></figure><p>具体编写脚本中我们通常并不使用这个函数,而根据具体类型定义的更细致的函数,例如Assignment提供的getLeft和getRight.<br><img src="https://ws1.sinaimg.cn/large/aa59003aly1fhpq2tk7zhj2095084mxj.jpg" alt=""></p><p>NonStatement与Expression的区别在于,NonStatement包含了一些高阶结构,例如jeb.api.ast.Class, jeb.api.ast.Method这些并不会出现在语句中的AST结构体,他们分别代表一个Class结构和Method结构,注意不要与反射语句中使用的Class和Method混淆<br><img src="https://ws1.sinaimg.cn/large/aa59003aly1fhpq3143g8j20bp0dxmy2.jpg" alt=""></p><p>Statement顾名思义就代表了一个语句,但值得注意的是这里的语句并不代表单个语句,<br>继承于Compound的Statement中也可能包含其他的Statement</p><p>非Compound的Statement是最基本的语句结构,它的子节点只会由Expression构成而不会包含block. 例如Assignment,可以通过getLeft和getRight调用获得左右两边的操作对象,分别为ILeftExpression和IExpression.ILeftExpression代表可以做左值的Expression,例如变量.而常量显然不实现ILeftExpression接口</p><p>Compound代表多个语句集合的语法块集合,每一个语法块以Block（也是Compound的子类）呈现,通过getBlocks调用获得.所有分支语句均继承Compound</p><p><strong> 如下例子所示: </strong></p><p><img src="https://ws1.sinaimg.cn/large/aa59003aly1fhpq64dfxgj20ax04r743.jpg" alt=""></p><p>继承于Compound的IfStm,也就是Statement<br>我们通过getBranchPredicate(idx)获取Predict,也就是ztz.isDead()这个Expression,而这个Expression真正的类型是子类Call.<br>我们可以通过getBranchBody(idx)获取if和if-else中的Block,通过getDefaultBlock获取else的Block</p><p><strong> IExpression代表了最基本的AST节点,其实现关系如下图 </strong></p><p><img src="https://ws1.sinaimg.cn/large/aa59003aly1fhpq37jq6rj20m50ctdh2.jpg" alt=""></p><p>IExpression接口的实现者Expression类代表了算术和逻辑运算的语句片段,例如a+b, “162” + ztz.toString(), !ztz, redrain*(ztz-162)等等,同时Predicate类是Expression类的直接子类,譬如在if(ztz162)中,该语句的Predicate左值为ztz162这个identifier,右值为null.</p><p><strong> 以ztz.test(1) + ”height” + 162这个Expression为例,其结构组成和各节点类型如下：</strong><br><img src="https://ws1.sinaimg.cn/large/aa59003aly1fhpq3rymokj20gu0bz0to.jpg" alt=""><br>Expression是从右到左的结构<br>Call没有提供获取caller的API,不过可以通过getSubElements()获取,返回顺序为 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">callee method</span><br><span class="line">calling instance (if instance call)</span><br><span class="line">calling arguments, one by one</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;JEB-1-5脚本编写&quot;&gt;&lt;a href=&quot;#JEB-1-5脚本编写&quot; class=&quot;headerlink&quot; title=&quot;JEB 1.5脚本编写&quot;&gt;&lt;/a&gt;JEB 1.5脚本编写&lt;/h1&gt;&lt;h2 id=&quot;1-环境配置&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="jeb" scheme="http://yoursite.com/tags/jeb/"/>
    
  </entry>
  
</feed>
